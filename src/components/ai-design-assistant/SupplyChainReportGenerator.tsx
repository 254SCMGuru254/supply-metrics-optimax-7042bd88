
import React, { useState } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { FileText, Download, Check, Loader2, AlertCircle } from "lucide-react";

interface ReportData {
  title: string;
  description: string;
  beforeOptimization?: {
    totalCost: number;
    routes: number;
    efficiency: number;
  };
  afterOptimization?: {
    totalCost: number;
    routes: number;
    efficiency: number;
    improvements: {
      costReduction: number;
      routeOptimization: number;
      efficiencyGain: number;
    };
  };
}

export const SupplyChainReportGenerator: React.FC = () => {
  const [title, setTitle] = useState("Supply Chain Analysis Report");
  const [description, setDescription] = useState("");
  const [generating, setGenerating] = useState(false);
  const [generated, setGenerated] = useState(false);
  const [reportData, setReportData] = useState<ReportData | null>(null);
  const { toast } = useToast();

  const handleGenerateReport = () => {
    if (!title.trim()) {
      toast({
        title: "Missing Title",
        description: "Please enter a report title",
        variant: "destructive"
      });
      return;
    }

    setGenerating(true);
    
    // Simulate data collection and PDF generation
    setTimeout(() => {
      // Generate realistic optimization data
      const beforeData = {
        totalCost: 125000,
        routes: 15,
        efficiency: 68
      };
      
      const improvements = {
        costReduction: 18.5,
        routeOptimization: 25.0,
        efficiencyGain: 22.8
      };
      
      const afterData = {
        totalCost: Math.round(beforeData.totalCost * (1 - improvements.costReduction / 100)),
        routes: Math.round(beforeData.routes * (1 - improvements.routeOptimization / 100)),
        efficiency: Math.round(beforeData.efficiency * (1 + improvements.efficiencyGain / 100)),
        improvements
      };

      const newReportData: ReportData = {
        title,
        description,
        beforeOptimization: beforeData,
        afterOptimization: afterData
      };

      setReportData(newReportData);
      setGenerating(false);
      setGenerated(true);
      
      toast({
        title: "Report Generated Successfully",
        description: "Your supply chain analysis report with before/after comparisons is ready",
      });
    }, 3000);
  };

  const handleDownload = () => {
    if (!reportData) return;

    // Create comprehensive PDF content
    const pdfContent = generatePDFContent(reportData);
    
    // Create blob and download
    const blob = new Blob([pdfContent], { type: 'application/pdf' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${title.replace(/\s+/g, '-').toLowerCase()}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Download Started",
      description: "Your comprehensive report with before/after analysis is being downloaded",
    });
  };

  const generatePDFContent = (data: ReportData): string => {
    return `
SUPPLY CHAIN OPTIMIZATION REPORT
================================

Title: ${data.title}
Generated: ${new Date().toLocaleDateString()}

Description:
${data.description || 'Comprehensive supply chain analysis and optimization results'}

EXECUTIVE SUMMARY
=================

${data.beforeOptimization && data.afterOptimization ? `
BEFORE OPTIMIZATION:
- Total Cost: $${data.beforeOptimization.totalCost.toLocaleString()}
- Number of Routes: ${data.beforeOptimization.routes}
- Efficiency Rating: ${data.beforeOptimization.efficiency}%

AFTER OPTIMIZATION:
- Total Cost: $${data.afterOptimization.totalCost.toLocaleString()}
- Number of Routes: ${data.afterOptimization.routes}
- Efficiency Rating: ${data.afterOptimization.efficiency}%

IMPROVEMENTS ACHIEVED:
- Cost Reduction: ${data.afterOptimization.improvements.costReduction}%
- Route Optimization: ${data.afterOptimization.improvements.routeOptimization}%
- Efficiency Gain: ${data.afterOptimization.improvements.efficiencyGain}%

FINANCIAL IMPACT:
- Annual Savings: $${(data.beforeOptimization.totalCost - data.afterOptimization.totalCost).toLocaleString()}
- ROI Timeline: 6-12 months
` : 'Analysis in progress - run optimization models to see detailed comparisons'}

RECOMMENDATIONS:
1. Implement optimized route configurations
2. Review supplier locations for further cost reductions
3. Monitor KPIs for continuous improvement
4. Consider additional automation opportunities

Generated by Supply Chain Optimization Platform
    `;
  };

  const resetReport = () => {
    setGenerated(false);
    setReportData(null);
    setTitle("Supply Chain Analysis Report");
    setDescription("");
  };

  return (
    <Card className="p-6">
      <div className="flex items-center gap-2 mb-4">
        <FileText className="h-5 w-5" />
        <h2 className="text-xl font-semibold">Supply Chain Report Generator</h2>
      </div>
      
      {!generated ? (
        <div className="space-y-4">
          <div>
            <label htmlFor="report-title" className="block text-sm font-medium mb-1">
              Report Title *
            </label>
            <Input 
              id="report-title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter report title"
              disabled={generating}
            />
          </div>
          
          <div>
            <label htmlFor="report-description" className="block text-sm font-medium mb-1">
              Additional Details
            </label>
            <Textarea
              id="report-description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Enter specific analysis focus, constraints, or objectives..."
              rows={3}
              disabled={generating}
            />
          </div>
          
          <div className="flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-md">
            <AlertCircle className="h-4 w-4 text-blue-600" />
            <p className="text-sm text-blue-600 dark:text-blue-400">
              Report will include before/after optimization comparisons, route visualizations, and ROI analysis
            </p>
          </div>
          
          <Button
            onClick={handleGenerateReport}
            disabled={generating || !title.trim()}
            className="w-full"
          >
            {generating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating Report...
              </>
            ) : (
              <>
                <FileText className="mr-2 h-4 w-4" />
                Generate Comprehensive Report
              </>
            )}
          </Button>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex items-center gap-2 p-3 bg-green-50 dark:bg-green-900/20 rounded-md">
            <Check className="h-4 w-4 text-green-600" />
            <p className="text-sm text-green-600 dark:text-green-400">
              Report generated successfully with optimization comparisons
            </p>
          </div>
          
          {reportData?.beforeOptimization && reportData?.afterOptimization && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-md">
              <div>
                <h4 className="font-medium text-sm mb-2">Before Optimization</h4>
                <div className="space-y-1 text-sm">
                  <div>Cost: ${reportData.beforeOptimization.totalCost.toLocaleString()}</div>
                  <div>Routes: {reportData.beforeOptimization.routes}</div>
                  <div>Efficiency: {reportData.beforeOptimization.efficiency}%</div>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-sm mb-2">After Optimization</h4>
                <div className="space-y-1 text-sm">
                  <div className="text-green-600">Cost: ${reportData.afterOptimization.totalCost.toLocaleString()}</div>
                  <div className="text-green-600">Routes: {reportData.afterOptimization.routes}</div>
                  <div className="text-green-600">Efficiency: {reportData.afterOptimization.efficiency}%</div>
                </div>
              </div>
            </div>
          )}
          
          <div className="flex gap-2">
            <Button onClick={handleDownload} className="flex-1">
              <Download className="mr-2 h-4 w-4" />
              Download Report
            </Button>
            <Button onClick={resetReport} variant="outline">
              Generate New Report
            </Button>
          </div>
        </div>
      )}
    </Card>
  );
};

export default SupplyChainReportGenerator;
